(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{477:function(t,a,s){"use strict";s.r(a);var v=s(21),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"简单贪心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单贪心"}},[t._v("#")]),t._v(" 简单贪心")]),t._v(" "),s("h3",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("p",[t._v("贪心算法（Greedy Algorithm）是求解一类最优化问题的方法，它总是考虑在当前状态下"),s("strong",[t._v("局部最优")]),t._v("的策略，来使全局的结果达到最优。贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到全局最优解，选择的贪心策略必须具备无后效性。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("💡无后效性")]),t._v(" "),s("p",[t._v("如果在某个阶段上过程的状态已知，则从此阶段以后过程的发展变化仅与此阶段的状态有关，而与过程在此阶段以前的阶段所经历过的状态无关。")])]),t._v(" "),s("h3",{attrs:{id:"基本思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本思路"}},[t._v("#")]),t._v(" 基本思路")]),t._v(" "),s("ol",[s("li",[t._v("建立数学模型来描述问题")]),t._v(" "),s("li",[t._v("把求解的问题分成若干个子问题")]),t._v(" "),s("li",[t._v("对每个子问题求解，得到子问题的局部最优解")]),t._v(" "),s("li",[t._v("把子问题的解局部最优解合成原来问题的一个解")])]),t._v(" "),s("h3",{attrs:{id:"适用性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用性"}},[t._v("#")]),t._v(" 适用性")]),t._v(" "),s("p",[s("strong",[t._v("贪心策略适用的前提是：局部最优策略能产生全局最优解")]),t._v("。实际上，贪心算法适用的情况很少。一旦能够证明贪心策略可用，贪心算法一般是这个问题最简单高效的解法。")]),t._v(" "),s("h3",{attrs:{id:"【例】硬币问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#【例】硬币问题"}},[t._v("#")]),t._v(" 【例】硬币问题")]),t._v(" "),s("p",[t._v("举个简单的例子，假设我们有面值分别为 1、2、5、10 的硬币，要求用尽可能少的硬币拼凑出总面值18。")]),t._v(" "),s("p",[t._v("如果采用贪心算法解决此问题，则解决方案为：每一步都选择当前所允许的最大面值的硬币（即局部最优解），结果为“10+5+2+1”共4枚硬币，整个解决方案也是最优的。")]),t._v(" "),s("p",[t._v("但将面值修改为分别为 1、7、10 的硬币，要求用尽可能少的硬币拼凑出总面值15。如果采用继续采用上述贪心策略，结果为“10+1+1+1+1+1”共6枚硬币，而实际上最优解应为“7+7+1”共3枚硬币，此时贪心算法并无法产生全局最优解。")]),t._v(" "),s("h3",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("ol",[s("li",[t._v("贪心算法不能保证解是最佳的。因为贪心算法总是从局部出发，并没从整体考虑。")]),t._v(" "),s("li",[t._v("贪心算法一般用来解决求最大或最小解。")]),t._v(" "),s("li",[t._v("贪心算法只能确定某些问题的可行性范围。")])]),t._v(" "),s("h2",{attrs:{id:"相关问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关问题"}},[t._v("#")]),t._v(" 相关问题")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/pages/15ae04/"}},[t._v("贪心算法专题")])],1)])}),[],!1,null,null,null);a.default=_.exports}}]);