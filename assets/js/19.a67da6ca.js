(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{475:function(s,t,a){"use strict";a.r(t);var n=a(21),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[s._v("#")]),s._v(" 基本概念")]),s._v(" "),a("p",[s._v("回溯算法（Back Tracking）实际上是一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。通常适用于求解排列组合、所有路径等问题。")]),s._v(" "),a("p",[s._v("一般解题步骤：")]),s._v(" "),a("ol",[a("li",[s._v("针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解")]),s._v(" "),a("li",[s._v("确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间")]),s._v(" "),a("li",[s._v("以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索")])]),s._v(" "),a("h2",{attrs:{id:"回溯法的递归模板使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯法的递归模板使用"}},[s._v("#")]),s._v(" 回溯法的递归模板使用")]),s._v(" "),a("h3",{attrs:{id:"递归模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归模板"}},[s._v("#")]),s._v(" 递归模板")]),s._v(" "),a("p",[s._v("许多复杂的，规模较大的问题都可以使用回溯法，故该算法有“通用解题方法”的美称。而在一般情况下，使用递归函数来实现回溯法比较简单，以下是伪代码版的递归模板：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("void backtracking(已选路径, 可选列表)\n{\n    if(满足解条件) {\n        添加结果路径;\n        return;\n    }\n    for(可选列表) {  // 根据情况可在此处进行剪枝优化\n        if(节点符合要求) {  // 可选，在for循环不方便剪枝的情况下使用\n            选择节点;\n            backtracking(新的已选路径, 可选列表);\n            撤销选择;\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"【例】返回某数组-无重复元素-的所有子集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#【例】返回某数组-无重复元素-的所有子集"}},[s._v("#")]),s._v(" 【例】返回某数组（无重复元素）的所有子集")]),s._v(" "),a("p",[s._v("以下从一个例子来理解此递归模板的使用：")]),s._v(" "),a("blockquote",[a("p",[s._v("如给定一个不包含重复元素的数组"),a("code",[s._v("nums = [1,2,3]")]),s._v("，应返回其所有子集为"),a("code",[s._v("[[],[1],[1,2],[1,2,3],[1,3],[2,3],[3]]")])])]),s._v(" "),a("p",[s._v("将遍历过程抽象为树形结构，如下所示：\n"),a("img",{attrs:{src:"https://gitee.com/einsier/pics-bed/raw/master/pics/2021%E2%80%8E0%E2%80%8E6%E2%80%8E%E2%80%8E20%E2%80%8E%E2%80%8F%E2%80%8E145142.jpg",alt:""}}),s._v("\n该树中每一个节点所经过的路径即为我们所要求的子集。")]),s._v(" "),a("p",[s._v("根据模板完成代码实现：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 为方便理解代码，结果集res为全局变量（也可放入参数列表） */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("backtracking")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("temp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此处无需判断条件，因为每一个节点都是我们要的解")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" idx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 剩余的元素是可选的")]),s._v("\n        path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("backtracking")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pop_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("针对回溯算法相关问题，通常我们可以按照以下步骤求解：")]),s._v(" "),a("ol",[a("li",[s._v("根据题意将遍历过程抽象为树形结构")]),s._v(" "),a("li",[s._v("确定解边界条件和剪枝优化过程")]),s._v(" "),a("li",[s._v("根据递归模板完成代码")])]),s._v(" "),a("h2",{attrs:{id:"相关问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关问题"}},[s._v("#")]),s._v(" 相关问题")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/pages/fde77d/"}},[s._v("回溯算法专题")])],1)])}),[],!1,null,null,null);t.default=r.exports}}]);